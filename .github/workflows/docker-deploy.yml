name: Build and Deploy Docker Image (Organization Runner Group)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy with Org Runner Group
    runs-on:
      group: Wesley-group-runner  # ✅ uses only the org runner group (no labels)

    env:
      PROJECT_ID: tactile-visitor-469118-d8
      ZONE: us-central1-c
      INSTANCE_NAME: wesley-vm

    steps:
      - name: Show runner info
        shell: bash
        run: |
          echo "Runner name: ${{ runner.name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner architecture: ${{ runner.arch }}"
          echo "Job is running inside Wesley-group-runner"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Docker image tag
        shell: bash
        run: echo "IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/my-php-app:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker image
        shell: bash
        run: |
          docker build \
            -t "$IMAGE_TAG" \
            -t "${{ secrets.DOCKERHUB_USERNAME }}/my-php-app:latest" \
            -f smartedu/Dockerfile smartedu

      - name: Push Docker images
        shell: bash
        run: |
          docker push "$IMAGE_TAG"
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/my-php-app:latest"

      - name: Stop and remove any existing container
        shell: bash
        run: docker rm -f php-app || true

      - name: Run Docker container on port 80
        shell: bash
        run: docker run -d -p 80:80 --name php-app "${{ secrets.DOCKERHUB_USERNAME }}/my-php-app:latest"

      # ======== GCP Auth & Firewall/IP Steps ========

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Open firewall ports 80, 5000, 5001 (create or update)
        shell: bash
        run: |
          set -euxo pipefail
          RULE_NAME="allow-php-app-ports"
          if gcloud compute firewall-rules describe "$RULE_NAME" --project "$PROJECT_ID" >/dev/null 2>&1; then
            gcloud compute firewall-rules update "$RULE_NAME" \
              --project "$PROJECT_ID" \
              --allow=tcp:80,tcp:5000,tcp:5001 \
              --direction=INGRESS \
              --source-ranges=0.0.0.0/0
          else
            gcloud compute firewall-rules create "$RULE_NAME" \
              --project "$PROJECT_ID" \
              --allow=tcp:80,tcp:5000,tcp:5001 \
              --direction=INGRESS \
              --source-ranges=0.0.0.0/0 \
              --network=default
          fi

      - name: Get VM public IP
        id: ip
        shell: bash
        run: |
          IP=$(gcloud compute instances describe "$INSTANCE_NAME" \
                --zone "$ZONE" --project "$PROJECT_ID" \
                --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          if [[ -z "$IP" ]]; then
            echo "No external IP found for $INSTANCE_NAME. Please ensure the VM has one." >&2
            exit 1
          fi
          echo "PUBLIC_IP=$IP" >> $GITHUB_OUTPUT

      - name: Publish access URLs to Job Summary
        env:
          IP: ${{ steps.ip.outputs.PUBLIC_IP }}
        shell: bash
        run: |
          {
            echo "## ✅ Application deployed successfully"
            echo ""
            echo "Access your app at:"
            echo "- http://$IP:80"
            echo "- http://$IP:5000 (ensure service is listening)"
            echo "- http://$IP:5001 (ensure service is listening)"
          } >> "$GITHUB_STEP_SUMMARY"
